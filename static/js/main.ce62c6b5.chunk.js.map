{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","textInput","React","useRef","useState","phrase","setPhrase","loading","setLoading","list","setList","error","setError","fetchData","a","fetch","res","json","data","getMovies","event","preventDefault","Response","Search","Error","current","focus","className","onSubmit","autoFocus","ref","type","value","placeholder","onChange","target","disabled","map","movie","index","src","Poster","alt","Title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PA2EeA,MAvEf,WACE,IAAMC,EAAYC,IAAMC,OAAO,MADlB,EAEeD,IAAME,SAAS,IAF9B,mBAENC,EAFM,KAEEC,EAFF,OAGiBJ,IAAME,UAAS,GAHhC,mBAGNG,EAHM,KAGGC,EAHH,OAIWN,IAAME,SAAS,MAJ1B,mBAINK,EAJM,KAIAC,EAJA,OAKaR,IAAME,SAAS,MAL5B,mBAKNO,EALM,KAKCC,EALD,cAOEC,IAPF,2EAOb,8BAAAC,EAAA,sEACoBC,MAAM,8CAAD,OACyBV,IAFlD,cACQW,EADR,gBAIqBA,EAAIC,OAJzB,cAIQC,EAJR,yBAKSA,GALT,4CAPa,sBAeb,IAAMC,EAAS,uCAAG,WAAOC,GAAP,eAAAN,EAAA,6DAChBM,EAAMC,iBAENb,GAAW,GACXE,EAAQ,MACRE,EAAS,MALO,SAOGC,IAPH,OASM,UAFhBK,EAPU,QASPI,SACPZ,EAAQQ,EAAKK,QAEbX,EAASM,EAAKM,OAGhBhB,GAAW,GACXP,EAAUwB,QAAQC,QAhBF,4CAAH,sDAmBf,OACE,sBAAKC,UAAU,MAAf,UACE,oBAAIA,UAAU,SAAd,0BAEA,uBAAMA,UAAU,YAAYC,SAAUT,EAAtC,UACE,uBACEU,WAAS,EACTC,IAAK7B,EACL8B,KAAK,OACLC,MAAO3B,EACP4B,YAAY,gBACZC,SAAU,SAACd,GAAD,OAAWd,EAAUc,EAAMe,OAAOH,QAC5CI,SAAU7B,IAEZ,wBAAQwB,KAAK,SAASK,SAAU7B,EAAhC,uBAKDA,EACC,oBAAIoB,UAAU,UAAd,wBACEhB,IAAUF,EACZ,oBAAIkB,UAAU,UAAd,SAAyBhB,IAEzB,oBAAIgB,UAAU,OAAd,SACGlB,EAAK4B,KAAI,SAACC,EAAOC,GAAR,OACR,+BACE,qBAAKC,IAAKF,EAAMG,OAAQC,IAAI,KAC5B,+BAAOJ,EAAMK,UAFNJ,YCpDNK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ce62c6b5.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./App.scss\";\n\nfunction App() {\n  const textInput = React.useRef(null);\n  const [phrase, setPhrase] = React.useState(\"\");\n  const [loading, setLoading] = React.useState(false);\n  const [list, setList] = React.useState(null);\n  const [error, setError] = React.useState(null);\n\n  async function fetchData() {\n    const res = await fetch(\n      `https://www.omdbapi.com/?apikey=20d04afb&s=${phrase}`\n    );\n    const data = await res.json();\n    return data;\n  }\n\n  const getMovies = async (event) => {\n    event.preventDefault();\n\n    setLoading(true);\n    setList(null);\n    setError(null);\n\n    const data = await fetchData();\n\n    if (data.Response === \"True\") {\n      setList(data.Search);\n    } else {\n      setError(data.Error);\n    }\n\n    setLoading(false);\n    textInput.current.focus();\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"Header\">Movie Search</h1>\n\n      <form className=\"SearchBar\" onSubmit={getMovies}>\n        <input\n          autoFocus\n          ref={textInput}\n          type=\"text\"\n          value={phrase}\n          placeholder=\"Type title...\"\n          onChange={(event) => setPhrase(event.target.value)}\n          disabled={loading}\n        />\n        <button type=\"submit\" disabled={loading}>\n          Search\n        </button>\n      </form>\n\n      {loading ? (\n        <h3 className=\"Message\">Loading...</h3>\n      ) : error || !list ? (\n        <h3 className=\"Message\">{error}</h3>\n      ) : (\n        <ul className=\"List\">\n          {list.map((movie, index) => (\n            <li key={index}>\n              <img src={movie.Poster} alt=\"\" />\n              <span>{movie.Title}</span>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}